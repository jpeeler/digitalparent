// generated 2007/10/23 21:02:35 EDT by ctemple@Barf.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /Projects/DP/DigitalParent.glade
// for gtk 2.10.11 and gtkmm 2.10.8
//
// Please modify the corresponding derived classes in ./src/media_player_dlg.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "media_player_dlg_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/adjustment.h>

media_player_dlg_glade::media_player_dlg_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  media_player_dlg = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Adjustment *hscale1_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 0, 0));
   hscale1 = Gtk::manage(new class Gtk::HScale(*hscale1_adj));
   open_media_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cdrom")));
   image2 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-media-play"), Gtk::IconSize(4)));
   play_button = Gtk::manage(new class Gtk::Button());
   image1 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-media-pause"), Gtk::IconSize(4)));
   pause_button = Gtk::manage(new class Gtk::Button());
   image4 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-media-stop"), Gtk::IconSize(4)));
   stop_button = Gtk::manage(new class Gtk::Button());
   image7 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-media-rewind"), Gtk::IconSize(4)));
   rewind_button = Gtk::manage(new class Gtk::Button());
   image5 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-media-previous"), Gtk::IconSize(4)));
   previous_button = Gtk::manage(new class Gtk::Button());
   image8 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-cut"), Gtk::IconSize(4)));
   label1 = Gtk::manage(new class Gtk::Label(_("Cut")));
   hbox1 = Gtk::manage(new class Gtk::HBox(false, 2));
   alignment1 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   cut_button = Gtk::manage(new class Gtk::ToggleButton());
   image6 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-media-forward"), Gtk::IconSize(4)));
   fastforward_button = Gtk::manage(new class Gtk::Button());
   image3 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-media-next"), Gtk::IconSize(4)));
   next_button = Gtk::manage(new class Gtk::Button());
   image9 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-index"), Gtk::IconSize(4)));
   playlist_button = Gtk::manage(new class Gtk::ToggleButton());
   fixed1 = Gtk::manage(new class Gtk::Fixed());
   hscale1->set_size_request(360,16);
   hscale1->set_flags(Gtk::CAN_FOCUS);
   hscale1->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   hscale1->set_inverted(false);
   hscale1->set_digits(1);
   hscale1->set_draw_value(true);
   hscale1->set_value_pos(Gtk::POS_TOP);
   open_media_button->set_size_request(112,32);
   open_media_button->set_flags(Gtk::CAN_FOCUS);
   open_media_button->set_relief(Gtk::RELIEF_NORMAL);
   image2->set_alignment(0.5,0.5);
   image2->set_padding(0,0);
   play_button->set_size_request(70,32);
   play_button->set_flags(Gtk::CAN_FOCUS);
   play_button->set_relief(Gtk::RELIEF_NORMAL);
   play_button->add(*image2);
   image1->set_alignment(0.5,0.5);
   image1->set_padding(0,0);
   pause_button->set_size_request(72,32);
   pause_button->set_flags(Gtk::CAN_FOCUS);
   pause_button->set_relief(Gtk::RELIEF_NORMAL);
   pause_button->add(*image1);
   image4->set_alignment(0.5,0.5);
   image4->set_padding(0,0);
   stop_button->set_size_request(72,32);
   stop_button->set_flags(Gtk::CAN_FOCUS);
   stop_button->set_relief(Gtk::RELIEF_NORMAL);
   stop_button->add(*image4);
   image7->set_alignment(0.5,0.5);
   image7->set_padding(0,0);
   rewind_button->set_size_request(72,32);
   rewind_button->set_flags(Gtk::CAN_FOCUS);
   rewind_button->set_relief(Gtk::RELIEF_NORMAL);
   rewind_button->add(*image7);
   image5->set_alignment(0.5,0.5);
   image5->set_padding(0,0);
   previous_button->set_size_request(72,32);
   previous_button->set_flags(Gtk::CAN_FOCUS);
   previous_button->set_relief(Gtk::RELIEF_NORMAL);
   previous_button->add(*image5);
   image8->set_alignment(0.5,0.5);
   image8->set_padding(0,0);
   label1->set_alignment(0.5,0.5);
   label1->set_padding(0,0);
   label1->set_justify(Gtk::JUSTIFY_LEFT);
   label1->set_line_wrap(false);
   label1->set_use_markup(false);
   label1->set_selectable(false);
   hbox1->pack_start(*image8, Gtk::PACK_SHRINK, 0);
   hbox1->pack_start(*label1, Gtk::PACK_SHRINK, 0);
   alignment1->add(*hbox1);
   cut_button->set_size_request(128,32);
   cut_button->set_flags(Gtk::CAN_FOCUS);
   cut_button->set_relief(Gtk::RELIEF_NORMAL);
   cut_button->set_active(false);
   cut_button->add(*alignment1);
   image6->set_alignment(0.5,0.5);
   image6->set_padding(0,0);
   fastforward_button->set_size_request(72,32);
   fastforward_button->set_flags(Gtk::CAN_FOCUS);
   fastforward_button->set_relief(Gtk::RELIEF_NORMAL);
   fastforward_button->add(*image6);
   image3->set_alignment(0.5,0.5);
   image3->set_padding(0,0);
   next_button->set_size_request(70,32);
   next_button->set_flags(Gtk::CAN_FOCUS);
   next_button->set_relief(Gtk::RELIEF_NORMAL);
   next_button->add(*image3);
   image9->set_alignment(0.5,0.5);
   image9->set_padding(0,0);
   playlist_button->set_size_request(72,32);
   playlist_button->set_flags(Gtk::CAN_FOCUS);
   playlist_button->set_relief(Gtk::RELIEF_NORMAL);
   playlist_button->set_active(false);
   playlist_button->add(*image9);
   fixed1->put(*hscale1, 152, 24);
   fixed1->put(*open_media_button, 0, 0);
   fixed1->put(*play_button, 368, 56);
   fixed1->put(*pause_button, 296, 56);
   fixed1->put(*stop_button, 224, 56);
   fixed1->put(*rewind_button, 152, 56);
   fixed1->put(*previous_button, 80, 56);
   fixed1->put(*cut_button, 536, 0);
   fixed1->put(*fastforward_button, 440, 56);
   fixed1->put(*next_button, 512, 56);
   fixed1->put(*playlist_button, 592, 56);
   media_player_dlg->set_title(_("Digital Parent"));
   media_player_dlg->set_default_size(800,600);
   media_player_dlg->set_modal(false);
   media_player_dlg->property_window_position().set_value(Gtk::WIN_POS_CENTER);
   media_player_dlg->set_resizable(false);
   media_player_dlg->property_destroy_with_parent().set_value(false);
   media_player_dlg->add(*fixed1);
   hscale1->show();
   open_media_button->show();
   image2->show();
   play_button->show();
   image1->show();
   pause_button->show();
   image4->show();
   stop_button->show();
   image7->show();
   rewind_button->show();
   image5->show();
   previous_button->show();
   image8->show();
   label1->show();
   hbox1->show();
   alignment1->show();
   cut_button->show();
   image6->show();
   fastforward_button->show();
   image3->show();
   next_button->show();
   image9->show();
   playlist_button->show();
   fixed1->show();
   media_player_dlg->show();
   hscale1->signal_value_changed().connect(SigC::slot(*this, &media_player_dlg_glade::on_hscale1_value_changed), false);
   open_media_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_open_media_button_clicked), false);
   play_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_play_button_clicked), false);
   pause_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_pause_button_clicked), false);
   stop_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_stop_button_clicked), false);
   rewind_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_rewind_button_clicked), false);
   previous_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_previous_button_clicked), false);
   cut_button->signal_toggled().connect(SigC::slot(*this, &media_player_dlg_glade::on_cut_button_toggled), false);
   fastforward_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_fastforward_button_clicked), false);
   next_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_next_button_clicked), false);
   playlist_button->signal_toggled().connect(SigC::slot(*this, &media_player_dlg_glade::on_playlist_button_toggled), false);
}

media_player_dlg_glade::~media_player_dlg_glade()
{  delete gmm_data;
}
