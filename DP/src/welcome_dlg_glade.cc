// generated 2007/10/30 13:12:09 EDT by jmorey@jmorey-desktop.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /Projects/DP/DigitalParent.glade
// for gtk 2.10.11 and gtkmm 2.10.8
//
// Please modify the corresponding derived classes in ./src/welcome_dlg.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "welcome_dlg_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>

welcome_dlg_glade::welcome_dlg_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  welcome_dlg = this;
   gmm_data = new GlademmData(get_accel_group());
   welcome_label = Gtk::manage(new class Gtk::Label(_("\n"
		"Before you can begin using Digital Parent,\n"
		"you will need to set up an administrative\n"
		"account.  Create a password with 8-16 char-\n"
		"acters and a secret question and answer \n"
		"with 1-16 characters.  These are case \n"
		"sensitive.  Write down you password in a\n"
		"safe place and then click next to continue.\n"
		"\n"
		"\n"
		"")));
   init_password_edit_box = Gtk::manage(new class Gtk::Entry());
   init_password_label = Gtk::manage(new class Gtk::Label(_("Enter Password")));
   repeat_password_label = Gtk::manage(new class Gtk::Label(_("Repeat Password")));
   repeat_password_edit_box = Gtk::manage(new class Gtk::Entry());
   secret_question_label = Gtk::manage(new class Gtk::Label(_("Secret Question")));
   secret_answer_label = Gtk::manage(new class Gtk::Label(_("Secret Answer")));
   secret_q_edit_box = Gtk::manage(new class Gtk::Entry());
   secret_a_edit_box = Gtk::manage(new class Gtk::Entry());
   welcome_next_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-media-next")));
   welcome_hint_label = Gtk::manage(new class Gtk::Label(_("")));
   fixed6 = Gtk::manage(new class Gtk::Fixed());
   vbox2 = Gtk::manage(new class Gtk::VBox(false, 0));
   welcome_label->set_alignment(0.5,0.5);
   welcome_label->set_padding(0,0);
   welcome_label->set_justify(Gtk::JUSTIFY_LEFT);
   welcome_label->set_line_wrap(false);
   welcome_label->set_use_markup(false);
   welcome_label->set_selectable(false);
   init_password_edit_box->set_size_request(160,27);
   init_password_edit_box->set_flags(Gtk::CAN_FOCUS);
   init_password_edit_box->set_visibility(false);
   init_password_edit_box->set_editable(true);
   init_password_edit_box->set_max_length(16);
   init_password_edit_box->set_text(_(""));
   init_password_edit_box->set_has_frame(true);
   init_password_edit_box->set_activates_default(false);
   init_password_label->set_size_request(125,17);
   init_password_label->set_alignment(0.5,0.5);
   init_password_label->set_padding(0,0);
   init_password_label->set_justify(Gtk::JUSTIFY_CENTER);
   init_password_label->set_line_wrap(false);
   init_password_label->set_use_markup(false);
   init_password_label->set_selectable(false);
   repeat_password_label->set_size_request(125,17);
   repeat_password_label->set_alignment(0.5,0.5);
   repeat_password_label->set_padding(0,0);
   repeat_password_label->set_justify(Gtk::JUSTIFY_CENTER);
   repeat_password_label->set_line_wrap(false);
   repeat_password_label->set_use_markup(false);
   repeat_password_label->set_selectable(false);
   repeat_password_edit_box->set_size_request(160,27);
   repeat_password_edit_box->set_flags(Gtk::CAN_FOCUS);
   repeat_password_edit_box->set_visibility(false);
   repeat_password_edit_box->set_editable(true);
   repeat_password_edit_box->set_max_length(16);
   repeat_password_edit_box->set_text(_(""));
   repeat_password_edit_box->set_has_frame(true);
   repeat_password_edit_box->set_activates_default(false);
   secret_question_label->set_size_request(125,17);
   secret_question_label->set_alignment(0.5,0.5);
   secret_question_label->set_padding(0,0);
   secret_question_label->set_justify(Gtk::JUSTIFY_CENTER);
   secret_question_label->set_line_wrap(false);
   secret_question_label->set_use_markup(false);
   secret_question_label->set_selectable(false);
   secret_answer_label->set_size_request(125,17);
   secret_answer_label->set_alignment(0.5,0.5);
   secret_answer_label->set_padding(0,0);
   secret_answer_label->set_justify(Gtk::JUSTIFY_CENTER);
   secret_answer_label->set_line_wrap(false);
   secret_answer_label->set_use_markup(false);
   secret_answer_label->set_selectable(false);
   secret_q_edit_box->set_size_request(160,27);
   secret_q_edit_box->set_flags(Gtk::CAN_FOCUS);
   secret_q_edit_box->set_visibility(true);
   secret_q_edit_box->set_editable(true);
   secret_q_edit_box->set_max_length(16);
   secret_q_edit_box->set_text(_(""));
   secret_q_edit_box->set_has_frame(true);
   secret_q_edit_box->set_activates_default(false);
   secret_a_edit_box->set_size_request(160,27);
   secret_a_edit_box->set_flags(Gtk::CAN_FOCUS);
   secret_a_edit_box->set_visibility(true);
   secret_a_edit_box->set_editable(true);
   secret_a_edit_box->set_max_length(16);
   secret_a_edit_box->set_text(_(""));
   secret_a_edit_box->set_has_frame(true);
   secret_a_edit_box->set_activates_default(false);
   welcome_next_button->set_size_request(86,45);
   welcome_next_button->set_flags(Gtk::CAN_FOCUS);
   welcome_next_button->set_relief(Gtk::RELIEF_NORMAL);
   welcome_hint_label->set_size_request(200,72);
   welcome_hint_label->set_alignment(0.5,0.5);
   welcome_hint_label->set_padding(0,0);
   welcome_hint_label->set_justify(Gtk::JUSTIFY_LEFT);
   welcome_hint_label->set_line_wrap(true);
   welcome_hint_label->set_use_markup(false);
   welcome_hint_label->set_selectable(false);
   fixed6->put(*init_password_edit_box, 176, 16);
   fixed6->put(*init_password_label, 32, 24);
   fixed6->put(*repeat_password_label, 32, 64);
   fixed6->put(*repeat_password_edit_box, 176, 56);
   fixed6->put(*secret_question_label, 32, 104);
   fixed6->put(*secret_answer_label, 32, 144);
   fixed6->put(*secret_q_edit_box, 176, 96);
   fixed6->put(*secret_a_edit_box, 176, 136);
   fixed6->put(*welcome_next_button, 480, 112);
   fixed6->put(*welcome_hint_label, 368, 16);
   vbox2->pack_start(*welcome_label, Gtk::PACK_SHRINK, 0);
   vbox2->pack_start(*fixed6);
   welcome_dlg->set_size_request(600,375);
   welcome_dlg->set_title(_("Welcome to Digital Parent"));
   welcome_dlg->set_default_size(600,450);
   welcome_dlg->set_modal(false);
   welcome_dlg->property_window_position().set_value(Gtk::WIN_POS_NONE);
   welcome_dlg->set_resizable(false);
   welcome_dlg->property_destroy_with_parent().set_value(false);
   welcome_dlg->add(*vbox2);
   welcome_label->show();
   init_password_edit_box->show();
   init_password_label->show();
   repeat_password_label->show();
   repeat_password_edit_box->show();
   secret_question_label->show();
   secret_answer_label->show();
   secret_q_edit_box->show();
   secret_a_edit_box->show();
   welcome_next_button->show();
   welcome_hint_label->show();
   fixed6->show();
   vbox2->show();
   welcome_dlg->show();
   init_password_edit_box->signal_editing_done().connect(SigC::slot(*this, &welcome_dlg_glade::on_init_password_edit_box_editing_done), false);
   repeat_password_edit_box->signal_editing_done().connect(SigC::slot(*this, &welcome_dlg_glade::on_repeat_password_edit_box_editing_done), false);
   secret_q_edit_box->signal_editing_done().connect(SigC::slot(*this, &welcome_dlg_glade::on_secret_q_edit_box_editing_done), false);
   secret_a_edit_box->signal_editing_done().connect(SigC::slot(*this, &welcome_dlg_glade::on_secret_a_edit_box_editing_done), false);
   welcome_next_button->signal_clicked().connect(SigC::slot(*this, &welcome_dlg_glade::on_welcome_next_button_clicked), false);
}

welcome_dlg_glade::~welcome_dlg_glade()
{  delete gmm_data;
}
