// generated 2007/10/15 12:17:04 EDT by jmorey@jmorey-desktop.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/jmorey/Projects/DigitalParent/DigitalParent.glade
// for gtk 2.10.11 and gtkmm 2.10.8
//
// Please modify the corresponding derived classes in ./src/media_player_dlg.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "media_player_dlg_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>

media_player_dlg_glade::media_player_dlg_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  media_player_dlg = this;
   gmm_data = new GlademmData(get_accel_group());
   open_media_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cdrom")));
   stop_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-media-stop")));
   play_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-media-pause")));
   button5 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-media-play")));
   previous_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-media-previous")));
   cut_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cut")));
   next_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-media-next")));
   fixed1 = Gtk::manage(new class Gtk::Fixed());
   open_media_button->set_size_request(134,56);
   open_media_button->set_flags(Gtk::CAN_FOCUS);
   open_media_button->set_relief(Gtk::RELIEF_NORMAL);
   stop_button->set_size_request(134,56);
   stop_button->set_flags(Gtk::CAN_FOCUS);
   stop_button->set_relief(Gtk::RELIEF_NORMAL);
   play_button->set_size_request(134,56);
   play_button->set_flags(Gtk::CAN_FOCUS);
   play_button->set_relief(Gtk::RELIEF_NORMAL);
   button5->set_size_request(134,56);
   button5->set_flags(Gtk::CAN_FOCUS);
   button5->set_relief(Gtk::RELIEF_NORMAL);
   previous_button->set_size_request(134,56);
   previous_button->set_flags(Gtk::CAN_FOCUS);
   previous_button->set_relief(Gtk::RELIEF_NORMAL);
   cut_button->set_size_request(134,56);
   cut_button->set_flags(Gtk::CAN_FOCUS);
   cut_button->set_relief(Gtk::RELIEF_NORMAL);
   next_button->set_size_request(134,56);
   next_button->set_flags(Gtk::CAN_FOCUS);
   next_button->set_relief(Gtk::RELIEF_NORMAL);
   fixed1->put(*open_media_button, 8, 72);
   fixed1->put(*stop_button, 8, 8);
   fixed1->put(*play_button, 152, 8);
   fixed1->put(*button5, 296, 8);
   fixed1->put(*previous_button, 440, 8);
   fixed1->put(*cut_button, 584, 72);
   fixed1->put(*next_button, 584, 8);
   media_player_dlg->set_title(_("Digital Parent"));
   media_player_dlg->set_default_size(800,600);
   media_player_dlg->set_modal(false);
   media_player_dlg->property_window_position().set_value(Gtk::WIN_POS_NONE);
   media_player_dlg->set_resizable(false);
   media_player_dlg->property_destroy_with_parent().set_value(false);
   media_player_dlg->add(*fixed1);
   open_media_button->show();
   stop_button->show();
   play_button->show();
   button5->show();
   previous_button->show();
   cut_button->show();
   next_button->show();
   fixed1->show();
   media_player_dlg->show();
   open_media_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_open_media_button_clicked), false);
   stop_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_stop_button_clicked), false);
   play_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_play_button_clicked), false);
   button5->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_button5_clicked), false);
   previous_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_previous_button_clicked), false);
   cut_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_cut_button_clicked), false);
   next_button->signal_clicked().connect(SigC::slot(*this, &media_player_dlg_glade::on_next_button_clicked), false);
}

media_player_dlg_glade::~media_player_dlg_glade()
{  delete gmm_data;
}
