// generated 2007/10/18 13:59:36 EDT by jmorey@jmorey-laptop.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /Projects/DP/DigitalParent.glade
// for gtk 2.10.11 and gtkmm 2.10.8
//
// Please modify the corresponding derived classes in ./src/login_dlg.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "login_dlg_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>

login_dlg_glade::login_dlg_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  login_dlg = this;
   gmm_data = new GlademmData(get_accel_group());
   drawingarea2 = Gtk::manage(new class Gtk::DrawingArea());
   admin_psswrd_edit_box = Gtk::manage(new class Gtk::Entry());
   hseparator1 = Gtk::manage(new class Gtk::HSeparator());
   previous_user_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-media-previous")));
   drawingarea4 = Gtk::manage(new class Gtk::DrawingArea());
   user_icon_select_button = Gtk::manage(new class Gtk::Button());
   next_user_button = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-media-next")));
   drawingarea3 = Gtk::manage(new class Gtk::DrawingArea());
   admin_login_button = Gtk::manage(new class Gtk::Button());
   admin_login_label = Gtk::manage(new class Gtk::Label(_("Please enter the password to login as the administrator.")));
   fixed5 = Gtk::manage(new class Gtk::Fixed());
   vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   drawingarea2->set_size_request(376,16);
   admin_psswrd_edit_box->set_size_request(160,27);
   admin_psswrd_edit_box->set_flags(Gtk::CAN_FOCUS);
   admin_psswrd_edit_box->set_visibility(false);
   admin_psswrd_edit_box->set_editable(true);
   admin_psswrd_edit_box->set_max_length(16);
   admin_psswrd_edit_box->set_text(_(""));
   admin_psswrd_edit_box->set_has_frame(true);
   admin_psswrd_edit_box->set_activates_default(true);
   hseparator1->set_size_request(376,16);
   previous_user_button->set_size_request(96,40);
   previous_user_button->set_flags(Gtk::CAN_FOCUS);
   previous_user_button->set_relief(Gtk::RELIEF_NORMAL);
   user_icon_select_button->set_size_request(160,136);
   user_icon_select_button->set_flags(Gtk::CAN_FOCUS);
   user_icon_select_button->set_relief(Gtk::RELIEF_NORMAL);
   user_icon_select_button->add(*drawingarea4);
   next_user_button->set_size_request(96,40);
   next_user_button->set_flags(Gtk::CAN_FOCUS);
   next_user_button->set_relief(Gtk::RELIEF_NORMAL);
   admin_login_button->set_size_request(160,136);
   admin_login_button->set_flags(Gtk::CAN_FOCUS);
   admin_login_button->set_relief(Gtk::RELIEF_NORMAL);
   admin_login_button->add(*drawingarea3);
   admin_login_label->set_size_request(152,72);
   admin_login_label->set_alignment(0.5,0.5);
   admin_login_label->set_padding(0,0);
   admin_login_label->set_justify(Gtk::JUSTIFY_CENTER);
   admin_login_label->set_line_wrap(true);
   admin_login_label->set_use_markup(false);
   admin_login_label->set_selectable(false);
   fixed5->put(*drawingarea2, 0, 344);
   fixed5->put(*admin_psswrd_edit_box, 208, 128);
   fixed5->put(*hseparator1, 8, 184);
   fixed5->put(*previous_user_button, 8, 288);
   fixed5->put(*user_icon_select_button, 112, 208);
   fixed5->put(*next_user_button, 280, 288);
   fixed5->put(*admin_login_button, 24, 24);
   fixed5->put(*admin_login_label, 216, 32);
   vbox1->pack_start(*fixed5);
   login_dlg->set_title(_("Digital Parent - Login"));
   login_dlg->set_modal(false);
   login_dlg->property_window_position().set_value(Gtk::WIN_POS_NONE);
   login_dlg->set_resizable(true);
   login_dlg->property_destroy_with_parent().set_value(false);
   login_dlg->add(*vbox1);
   drawingarea2->show();
   admin_psswrd_edit_box->show();
   hseparator1->show();
   previous_user_button->show();
   drawingarea4->show();
   user_icon_select_button->show();
   next_user_button->show();
   drawingarea3->show();
   admin_login_button->show();
   admin_login_label->show();
   fixed5->show();
   vbox1->show();
   login_dlg->show();
   admin_psswrd_edit_box->signal_editing_done().connect(SigC::slot(*this, &login_dlg_glade::on_admin_psswrd_edit_box_editing_done), false);
   previous_user_button->signal_clicked().connect(SigC::slot(*this, &login_dlg_glade::on_previous_user_button_clicked), false);
   user_icon_select_button->signal_clicked().connect(SigC::slot(*this, &login_dlg_glade::on_user_icon_select_button_clicked), false);
   next_user_button->signal_clicked().connect(SigC::slot(*this, &login_dlg_glade::on_next_user_button_clicked), false);
   admin_login_button->signal_clicked().connect(SigC::slot(*this, &login_dlg_glade::on_admin_login_button_clicked), false);
}

login_dlg_glade::~login_dlg_glade()
{  delete gmm_data;
}
